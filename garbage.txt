 // if (!data.verfied) {
    //   const token = await tokenModel.findOne({ userId: data._id });
    //   if (!token) {
    //     const newtoken = await tokenModel.create({
    //       userId: data._id,
    //       token: crypto.randomBytes(32).toString("hex"),
    //     });
    //     const url = `${process.env.BASE_URL}users/${data._id}/verify/${newtoken.token}`;
    //     await sendEmail(data.email, "Verify email", url);
    //   }
    //   return res.status(401).send({
    //     message:
    //       "Email has been sent to your gmail account after verifying try logging in again",
    //   });
    // }





  const token = await tokenModel.create({
       userId: huru._id,
       token: crypto.randomBytes(32).toString("hex"),
 });
    const url = `${process.env.BASE_URL}users/${huru._id}/verify/${token.token}`;
     await sendEmail(huru.email, "Verify email", url);





    app.get("/:id/verify/:token", async (req, res) => {
  const { id, token } = req.params;

  try {
    const data = await userModel.findOne({ _id: id });

    if (!data) {
      return res.status(401).send({ message: "Invalid link" });
    }
    const exixtingtoken = await tokenModel.findOne({
      userId: id,
      token: token,
    });

    if (!exixtingtoken) {
      return res.status(401).send({ message: "Invalid link" });
    }
    await userModel.findOneAndUpdate(
      { _id: data._id },
      { $set: { verfied: true } }
    );
    await exixtingtoken.remove();
    res.send({ message: "Email Verified successfully" });
  } catch (error) {
    console.log("error:", error);
    res
      .status(401)
      .send({ message: "Internal server error please try again later" });
  }
});